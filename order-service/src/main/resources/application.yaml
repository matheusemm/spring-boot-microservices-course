spring:
  application:
    name: order-service
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:25432/postgres}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
  jpa:
    open-in-view: false
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${order.oauth2.realm-url}
#  flyway:
#    validate-migration-naming: true

server:
  port: 8082
  shutdown: graceful

management:
  endpoints:
    web:
      exposure:
        include: "*"
  info:
    git:
      mode: full
  metrics:
    tags:
      application: ${spring.application.name}
  tracing:
    enabled: false
    sampling:
      probability: 1.0

order:
  catalog-service-url: http://localhost:8081
  orders-events-exchange: orders-exchange
  new-orders-queue: new-orders
  delivered-orders-queue: delivered-orders
  cancelled-orders-queue: cancelled-orders
  error-orders-queue: error-orders
  publish-order-events-job-cron: "*/5 * * * * *"
  new-orders-job-cron: "*/10 * * * * *"
  oauth2:
    server-url: http://localhost:9191
    realm-url: ${order.oauth2.server-url}/realms/bookstore

resilience4j:
  circuitbreaker:
    instances:
      catalog-service:
        sliding-window-type: count_based
        sliding-window-size: 6
        minimum-number-of-calls: 4
        wait-duration-in-open-state: 20s
        permitted-number-of-calls-in-half-open-state: 2
        failure-rate-threshold: 50
  retry:
    instances:
      catalog-service:
        max-attempts: 2
        wait-duration: 1s

swagger:
  api-gateway-url: http://localhost:8989/order
